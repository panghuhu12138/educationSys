<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Dao.CourseMapper">
  <resultMap id="BaseResultMap" type="Entity.Course">
    <id column="course_id" jdbcType="VARCHAR" property="courseId" />
    <result column="course_name" jdbcType="VARCHAR" property="courseName" />
    <result column="course_num" jdbcType="VARCHAR" property="courseNum" />
    <result column="teacher_id" jdbcType="VARCHAR" property="teacherId" />
    <result column="course_credit" jdbcType="TINYINT" property="courseCredit" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="user_name" jdbcType="TINYINT" property="teacherName" />
    <result column="phone" jdbcType="TINYINT" property="teacherPhone" />
    <result column="student_num" jdbcType="INTEGER" property="studentNum" />
  </resultMap>
  <sql id="Base_Column_List">
    course_id, course_name, course_num, teacher_id, course_credit, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from course
    where course_id = #{courseId,jdbcType=VARCHAR}
  </select>


    <select id="findAll" resultMap="BaseResultMap" parameterType="Map">
      select
      a.*,
      b.user_name,
      b.phone
        from course a
        left join user b on b.user_id = a.teacher_id
      <where>
        a.status = 1
      <if test="courseName != null and courseName != ''">
        and a.course_name like '%${courseName}%'
      </if>
      <if test="chosenCourseIds != null">
        and a.course_id not in
        <foreach collection="chosenCourseIds" item="chosenCourseId" open="(" close=")" separator=",">
          #{chosenCourseId}
        </foreach>
      </if>
      </where>
        order by a.status,a.course_num
    </select>
  <select id="findAll2" resultMap="BaseResultMap" parameterType="Map">
    select
    a.*,
    b.user_name,
    IF(a.status = 1, (select count(1) from choose_course c where c.course_id = a.course_id),
    (select count(1) from choose_course c where c.course_id = a.course_id and c.status = 2)) as student_num
    from course a
    left join user b on b.user_id = a.teacher_id
    <where>
      <if test="courseName != null and courseName != ''">
        and a.course_name like '%${courseName}%'
      </if>
      <if test="status != null and status != ''">
        and a.status = #{status}
      </if>
      <if test="teacherId != null and teacherId != ''">
        and a.teacher_id = #{teacherId}
      </if>
    </where>
    order by a.status,a.course_num
  </select>
  <select id="queryAllChooseCourseByCourseId" resultType="Entity.Course">

  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from course
    where course_id = #{courseId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="Entity.Course">
    insert into course (course_id, course_name, course_num, 
      teacher_id, course_credit, status
      )
    values (#{courseId,jdbcType=VARCHAR}, #{courseName,jdbcType=VARCHAR}, #{courseNum,jdbcType=VARCHAR}, 
      #{teacherId,jdbcType=VARCHAR}, #{courseCredit,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="Entity.Course">
    insert into course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        course_id,
      </if>
      <if test="courseName != null">
        course_name,
      </if>
      <if test="courseNum != null">
        course_num,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="courseCredit != null">
        course_credit,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        #{courseId,jdbcType=VARCHAR},
      </if>
      <if test="courseName != null">
        #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseNum != null">
        #{courseNum,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="courseCredit != null">
        #{courseCredit,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="Entity.Course">
    update course
    <set>
      <if test="courseName != null">
        course_name = #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseNum != null">
        course_num = #{courseNum,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null">
        teacher_id = #{teacherId,jdbcType=VARCHAR},
      </if>
      <if test="courseCredit != null">
        course_credit = #{courseCredit,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where course_id = #{courseId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="Entity.Course">
    update course
    set course_name = #{courseName,jdbcType=VARCHAR},
      course_num = #{courseNum,jdbcType=VARCHAR},
      teacher_id = #{teacherId,jdbcType=VARCHAR},
      course_credit = #{courseCredit,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT}
    where course_id = #{courseId,jdbcType=VARCHAR}
  </update>
  <update id="updateAll" parameterType="Map">
    update course
    <set>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where course_id in
    <foreach collection="courseIds" item="courseId" open="(" close=")" separator=",">
      #{courseId}
    </foreach>
  </update>
</mapper>